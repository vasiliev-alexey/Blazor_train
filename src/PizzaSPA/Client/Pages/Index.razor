@page "/"
@using System.ComponentModel.Design
@using PizzaSPA.Shared
@using PizzaSPA.Shared.Interfaces
@inject IMenuService MenuService
@inject IOrderService OrderService
@inject State State
@inject NavigationManager _navigationManager


<h1>Магазин Пиццы</h1>

@* Новое приложене на Blazor *@

<div class="d-flex flex-column">

    <PizzaList Title="Our selected list of pizzas"
               Menu="@State.Menu"
               Selected="@((pizza) => AddToBasket(pizza))" 
               ShowPizzaInformation="@((pizza) => ShowPizzaInformation(pizza))"
               />


</div>
<!-- В корзине заказов-->
<ShoppingBasket Title="Your current order"
                Basket="@State.Basket"
                GetPizzaFromId="@State.Menu.GetPizza"
                Selected="@(pos => RemoveFromBasket(pos))" />


<!-- Данные о клиенте -->

<h1>Данные о клиенте</h1>
<fieldset class="d-flex flex-column">
    <p>
        <label for="name">Имя:</label>
        <input id="name" @bind="@State.Basket.Customer.Name" />

        @if (State.Basket.Customer.GetErrors(nameof(Customer.Name)).Any())
        {
        <ul class="validation-error">
            @foreach (var error in State.Basket.Customer.GetErrors(nameof(Customer.Name)))
            {
            <li>@error></li>
            }
        </ul>
        }

    </p>
    <p>
        <label for="street">Улица:</label>
        <input id="street" @bind="@State.Basket.Customer.Street" />
        @if (State.Basket.Customer.GetErrors(nameof(Customer.Street)).Any())
               {
        <ul class="validation-error">
            @foreach (var error in State.Basket.Customer.GetErrors(nameof(Customer.Street)))
                       {
            <li>@error></li>
                       }
        </ul>
               }
    </p>
    <p>
        <label for="city">Город:</label>
        <input id="city" @bind="@State.Basket.Customer.City" />
        @if (State.Basket.Customer.GetErrors(nameof(Customer.City)).Any())
               {
        <ul class="validation-error">
            @foreach (var error in State.Basket.Customer.GetErrors(nameof(Customer.City)))
                       {
            <li>@error></li>
                       }
        </ul>
               }
    </p>


</fieldset>

@if (State.Basket.Orders.Any())
{
<button class="btn btn-info" @onclick="@PlaceOrder">Разместить заказ</button>
}

@if (debug)
{
<p>@State.ToJson()</p>
}


@code
       {
    private bool debug =
#if DEBUG
        true;
#else
    false;
#endif


   // private State State { get; } = new State();

    protected override async Task OnInitializedAsync()
    {
        State.Menu = await MenuService.GetMenu();
        State.Basket.Customer.PropertyChanged += (sender , e) => this.StateHasChanged();
    }

    private string SpicinessImage(Spiciness spiciness)
    {
        return $"images/{spiciness.ToString().ToLower()}.png";
    }

    private void AddToBasket(Pizza pizza)
    {
        Console.WriteLine($"Added pizza to basket {pizza.Name}");
        State.Basket.Add(pizza.Id);
        StateHasChanged();
    }

    private void RemoveFromBasket(int pos)
    {
        Console.WriteLine($"Removed pizza from basket at pos {pos}");
        State.Basket.Remove(pos);
        StateHasChanged();
    }

    private async void PlaceOrder()
    {
      await  OrderService.PlaceOrder(State.Basket);
        //Console.WriteLine("Заказ размещен");

    }

    private void ShowPizzaInformation(Pizza pizza)
    {
        State.CurrentPizza = pizza;
     Console.WriteLine("Редирект");
        _navigationManager.NavigateTo("/PizzaInfo");
    }

}
